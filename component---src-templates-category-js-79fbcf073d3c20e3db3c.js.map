{"version":3,"file":"component---src-templates-category-js-79fbcf073d3c20e3db3c.js","mappings":"uLAkDA,EA9CoB,SAAC,GAAmB,IAAjBA,EAAgB,EAAhBA,UAkBfC,EAjBc,WAClB,IAAMA,EAAW,GAajB,OAZAD,EAAUE,SAAQ,SAAAC,GAChBF,EAASG,KAAK,CACZC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BC,KAAMN,EAASG,KAAKI,YAAYD,KAChCE,WAAYR,EAASG,KAAKI,YAAYC,WACtCC,MAAOT,EAASG,KAAKI,YAAYE,MACjCC,MAAOV,EAASG,KAAKI,YAAYG,MACjCC,KAAMX,EAASG,KAAKC,OAAOO,KAC3BC,QAASZ,EAASG,KAAKS,QACvBC,WAAYb,EAASG,KAAKU,YAE7B,IACMf,CACR,CAEgBgB,GACjB,OACE,uBAAKC,UCrBgB,4CDuBnBjB,EAASkB,KAAI,SAAAC,GAAI,OACf,gBAAC,EAAAC,KAAD,CAAMC,GAAIF,EAAKf,KAAMkB,IAAKH,EAAKP,OAC7B,2BAASK,UC3BK,2CD4BZ,uBAAKA,UCxBE,qCDyBL,0BAAKE,EAAKP,OACV,uBAAKK,UC3BD,oCD4BDE,EAAKN,KADR,MACsB,4BAAOM,EAAKT,WAAWa,KAAK,QAAe,IADjE,KAEWJ,EAAKJ,WAFhB,YAEqC,KAEpCI,EAAKR,OAAS,uBACbM,UClCW,8CDmCXO,MAAO,CACLC,gBAAgB,OAAQN,EAAKR,MAAMe,gBAAgBC,MAAMC,IAA1C,OAGnB,yBAAIT,EAAKL,WAfA,IAsBtB,C,6FE3BD,UAdyB,SAAC,GAAD,IAAGe,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,OACvB,gBAAC,IAAD,KACE,4BACE,gBAAC,KAAD,CAAQlB,MAAK,KAAOkB,EAAYC,SAAnB,OAAkCC,IAAAA,YAC/C,sCAEL,IACAF,EAAYC,UAEP,gBAAC,IAAD,CAAahC,UAAW8B,EAAKI,kBAAkBC,SAT5B,C","sources":["webpack://symbioquine-dot-net/./src/components/PostListing.js","webpack://symbioquine-dot-net/./src/components/PostsListing.module.scss","webpack://symbioquine-dot-net/./src/templates/category.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport * as styles from './PostsListing.module.scss'\n\nconst PostListing = ({ postEdges }) => {\n  const getPostList = () => {\n    const postList = []\n    postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        categories: postEdge.node.frontmatter.categories,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      })\n    })\n    return postList\n  }\n\n  const postList = getPostList()\n  return (\n    <div className={styles.articleList}>\n      {/* Your post list here. */\n      postList.map(post => (\n        <Link to={post.path} key={post.title}>\n          <article className={styles.articleBox}>\n            <div className={styles.right}>\n              <h3>{post.title}</h3>\n              <div className={styles.meta}>\n                {post.date} &mdash; <span>{post.categories.join(' / ')}</span>{' '}\n                &mdash; {post.timeToRead} Min Read{' '}\n              </div>\n              {post.cover && <div\n                className={styles.articleBoxImg}\n                style={{\n                  backgroundImage: `url(${post.cover.childImageSharp.fluid.src})`,\n                }}>\n              </div>}\n              <p>{post.excerpt}</p>\n            </div>\n          </article>\n        </Link>\n      ))}\n    </div>\n  )\n}\n\nexport default PostListing\n","// extracted by mini-css-extract-plugin\nexport var articleBox = \"PostsListing-module--article-box--KlK75\";\nexport var articleBoxImg = \"PostsListing-module--article-box-Img--VSH0c\";\nexport var articleList = \"PostsListing-module--article-list--jwzfq\";\nexport var meta = \"PostsListing-module--meta--UNq7G\";\nexport var right = \"PostsListing-module--right--IECb+\";","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport config from '../../data/SiteConfig'\n\nconst CategoryTemplate = ({ data, pageContext }) => (\n  <Layout>\n    <main>\n      <Helmet title={` \"${pageContext.category}\" - ${config.siteTitle}`} />\n      <h1>\nCategory:\n{' '}\n{pageContext.category}\n</h1>\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\n    </main>\n  </Layout>\n)\n\nexport default CategoryTemplate\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n            date\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["postEdges","postList","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","categories","cover","title","date","excerpt","timeToRead","getPostList","className","map","post","Link","to","key","join","style","backgroundImage","childImageSharp","fluid","src","data","pageContext","category","config","allMarkdownRemark","edges"],"sourceRoot":""}